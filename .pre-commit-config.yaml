default_stages: [commit, merge-commit, push]
repos:
  # Git checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.2.0
    hooks:
      - id: forbid-new-submodules
        name: 'Git checks: prevents addition of new git submodules'
      - id: check-merge-conflict
        name: 'Git checks: checks for files that contain merge conflict strings'
        args: [--assume-in-merge]
      # - id: no-commit-to-branch
      #   name: 'Git checks: Prevents commits to protected branches'
      #   args: [-b, main, dev, prod]
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v2.34.0
    hooks:
      - id: commitizen
        name: 'Git checks: commit linter (conventional commit format)'
        stages: [commit-msg]
      # - id: commitizen-branch
      #   name: 'Git checks: Check all un-pushed commit messages (conventional commit format)'
      #   stages: [push]
  # Generic checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.2.0
    hooks:
      - id: check-added-large-files
        name: 'Generic checks: Prevents giant files from being committed'
        args: [--enforce-all]
      # - id: check-case-conflict
      #   name: 'Generic checks: Checks for files that would conflict in case-insensitive filesystems'
      # Generic fixes
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.2.0
    hooks:
      - id: fix-byte-order-marker
        name: 'Generic fixes: removes utf-8 byte order marker'
      - id: mixed-line-ending
        name: 'Generic fixes: replaces or checks mixed line ending'
        args: [--fix=lf]
      - id: trailing-whitespace
        name: 'Generic fixes: trims trailing whitespace'
      # end-of-file-fixer - ensures that a file is either empty, or ends with one newline.
      ## Data serialisation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.2.0
    hooks:
      - id: check-json
        name: 'Data serialisation: checks json files for parseable syntax'
      - id: check-toml
        name: 'Data serialisation: checks toml files for parseable syntax'
      - id: check-xml
        name: 'Data serialisation: checks xml files for parseable syntax'
      - id: check-yaml
        name: 'Data serialisation: checks yaml files for parseable syntax'
        # args: [--allow-multiple-documents]
  ## Conventional commits
  - repo: https://github.com/PrincetonUniversity/blocklint
    rev: v0.2.3
    hooks:
      - id: blocklint
        name: 'Generic checks: finds non-inclusive wording'
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.9.0
    hooks:
      - id: text-unicode-replacement-char
        name: 'Generic checks: Forbid files with UTF-8 replacement character'
  - repo: https://github.com/sirosen/texthooks
    rev: 0.4.0
    hooks:
      - id: forbid-bidi-controls
        name: 'Generic fixes: Forbid unicode bidirectional control characters'
      - id: fix-smartquotes
        name: 'Generic fixes: Fix smartquotes (non-ASCII quotes)'
      - id: fix-ligatures
        name: 'Generic fixes: Fix ligatures (non-ASCII joined letters)'
  # IAC linters
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.14.3
    hooks:
      - id: check-azure-pipelines
        name: 'CI config linter: Azure Pipelines'
  - repo: https://github.com/aws-cloudformation/cfn-python-lint
    rev: v0.59.0
    hooks:
      - id: cfn-python-lint
        name: 'Linter: AWS CloudFormation (IAC) config linter'
        files: path/to/cfn/dir/.*\.(json|yml|yaml)$
  ## Security
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.2.0
    hooks:
      - id: detect-private-key
        name: 'Security: Detect private keys'
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.2.0
    hooks:
      - id: detect-secrets
        exclude: package.lock.json
        name: 'Security: Detect secrets (Yelp)'
